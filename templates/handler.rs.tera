{#-
Tera template for generating FDIC handler stubs.
Context variables (from generate_handlers.rs):
    endpoint: String, e.g. "institutions" — endpoint name, lowercase, no slash
    endpoint_cap: String, e.g. "Institutions" — endpoint name, capitalized
    properties_type: String, e.g. "InstitutionsProperties" — Rust struct for response properties
    parameters_type: String, e.g. "InstitutionsParameters" — Rust struct for query parameters
    spec_file_name: String, e.g. "public/fdic/institutions_properties.yaml" — YAML file path for properties
    summary: String — short summary from OpenAPI spec
    description: String — long description from OpenAPI spec
    tags: Vec<String> — OpenAPI tags (usually one)
    parameters: Vec<Map> — parameter objects with fields: name, ty, description
    properties: Vec<Map> — property objects with fields: name, ty, title, description
    envelope_properties: Vec<Map> — envelope property objects with fields: name, ty, title, description
    properties_for_handler: Vec<String> — property names (UPPERCASE, except api_key/filename) for handler slice
    common_parameter_names: Vec<String> — names of common parameters
    endpoint_specific_parameters: Vec<String> — names of endpoint-specific parameters
-#}//! Do not edit by hand.
//! Auto-generated handler for FDIC BankFind API `/{{ endpoint }}` endpoint.

// Internal imports (std, crate)
use crate::common::*;
use crate::config::FdicApiConfig;

// External imports (alphabetized)
use rmcp::handler::server::tool::IntoCallToolResult;
use rmcp::model::*;
use serde::{Deserialize, Serialize};
use schemars::JsonSchema;
use std::collections::HashMap;
use tracing::info;
use utoipa::ToSchema;

/// Auto-generated parameters struct for `/{{ endpoint }}` endpoint.
/// Spec: {{ spec_file_name | default(value="") }}
#[derive(Clone, Debug, Default, Deserialize, Serialize, JsonSchema, ToSchema)]
pub struct {{ parameters_type }} {
    /// Shared FDIC query parameters
    #[serde(flatten)]
    pub common: CommonParameters,
    {#- Endpoint-specific additional parameters -#}
    {%- set common_list = ["api_key","filters","fields","sort_by","sort_order","limit","offset","format","download","filename"] -%}
    {% for p in parameters %}{%- if p.name not in common_list %}{%- if p.description %}
    #[schemars(description = r#"{{ p.description }}"#)]
    {%- endif %}
    pub {{ p.name }}: Option<{{ p.rust_type }}>,
    {%- endif %}{% endfor %}
}

// Implement FdicEndpoint for generic handler
impl FdicEndpoint for {{ parameters_type }} {
    fn name() -> &'static str {
        "{{ endpoint }}"
    }
}

// Implement QueryParameters for generic handler
impl QueryParameters for {{ parameters_type }} {
    const VALID_FIELDS: &'static [&'static str] = &[
        {%- for f in valid_fields %}
        "{{ f }}",
        {%- endfor %}
    ];

    #[allow(unused_variables)] // the `query` parameter is unused if there are no endpoint-specific parameters
    fn insert_endpoint_specific(&self, query: &mut HashMap<String, String>) {
        {% for p in parameters %}{% if p.name not in common_list %}
        if let Some(val) = &self.{{ p.name }} {
            query.insert("{{ p.name }}".to_string(), val.to_string());
        }
        {%- endif %}{% endfor %}
    }

    fn common_mut(&mut self) -> &mut CommonParameters {
        &mut self.common
    }
}

/// Auto-generated properties struct for `/{{ endpoint }}` endpoint.
/// Spec: {{ spec_file_name | default(value="") }}
#[derive(Clone, Debug, Default, Deserialize, Serialize, JsonSchema, ToSchema)]
#[serde(rename_all = "UPPERCASE")]
pub struct {{ properties_type }} {
{%- for prop in properties %}
    #[schemars(description = r#"{{ prop.title }} - {{ prop.description }}"#)]
    pub {{ prop.name | lower }}: Option<{{ prop.rust_type }}>,
{% endfor %}
}

#[derive(Clone,Debug, Serialize, Deserialize, JsonSchema, ToSchema)]
pub struct {{ endpoint_cap }}Response {
    pub data: Vec<{{ properties_type }}>,
    pub meta: ResponseMeta,
    pub total: u64,
}

impl IntoContents for {{ endpoint_cap }}Response {
    fn into_contents(self) -> Vec<Content> {
        // Convert the response into a Vec<Content> as expected by MCP
        // Panics only if serialization fails, which should be impossible for valid structs
        vec![Content::json(self).expect("Failed to serialize {{ endpoint_cap }}Response to Content")]
    }
}

/// FDIC BankFind API `/{{ endpoint }}` endpoint handler
/// {{ summary }}
{% if description -%}
/// {{ description }}
{%- endif %}
/// **All string parameter values (except `api_key` and `filename`) are uppercased before proxying.**
{% if parameters -%}
#[doc = r#"{% for p in parameters %}{%- if p.name %} - `{{ p.name }}` ({{ p.rust_type }}, optional): {{ p.description | trim }}{% if p.example %}
{{ p.example }}{% endif %}{% endif %}{% endfor %}"#]
{%- endif %}
#[doc = r#"Verb: GET
Path: /{{ endpoint }}
Parameters: {{ parameters_type }}
Responses:
    200: Successful Operation
    400: Bad input parameter
    500: Internal Server Error
    502: Bad Gateway
    503: Service Unavailable
    504: Gateway Timeout
Tag: {{ tags.0 }}"#]
pub async fn {{ endpoint }}_handler(config: &FdicApiConfig, params: &{{ parameters_type }}) -> Result<CallToolResult, rmcp::Error> {
    // Log incoming request parameters and request details as structured JSON
    info!(
        target = "handler",
        event = "incoming_request",
        endpoint = "{{ endpoint }}",
        method = "GET",
        path = "/{{ endpoint }}",
        params = serde_json::to_string(params).unwrap()
    );

    let resp = get_fdic_bank_find_mcp_response::<_, {{ endpoint_cap }}Response>(config, params).await;

    // Log outgoing FDIC API request as structured JSON
    resp.and_then(|r| r.into_call_tool_result())
}

#[cfg(test)]
mod tests {
    use super::*;
    use serde_json;
    #[test]
    fn test_parameters_struct_serialization() {
        let params = {{ parameters_type }} {
            common: CommonParameters::default(),
            {% for p in parameters %}{% if p.name | lower not in common_parameter_names -%}
            {{ p.name | lower }}: None,
            {% endif %}{%- endfor %}
        };
        let _ = serde_json::to_string(&params).unwrap();
    }

    #[test]
    fn test_properties_struct_serialization() {
        let props = {{ properties_type }} {
            {% for prop in properties %}{{ prop.name | lower }}: None,
            {% endfor -%}
        };
        let _ = serde_json::to_string(&props).unwrap();
    }
}
