//! Do not edit by hand.
//! Auto-generated handler stubs for FDIC BankFind API endpoints.
// MCP auto-generated: Endpoint handler modules
{%- for ep in endpoints %}
pub mod {{ ep.endpoint }};
{%- endfor %}
{%- if skipped_endpoints and skipped_endpoints | length > 0 %}
// Skipped endpoints due to ENDPOINT_EXCLUSIONS:
{%- for ep in skipped_endpoints %}
// [EXCLUDED] pub mod {{ ep }};
{%- endfor %}
{%- endif %}

use crate::config::FdicApiConfig;
use rmcp::{ServerHandler, Error, model::*, service::*, tool};

pub const FDIC_BASE_URL: &str = "https://banks.data.fdic.gov/api";

#[derive(Clone, Debug, Default)]
pub struct FdicBankFindMcpServer;

impl FdicBankFindMcpServer {
    pub fn new() -> Self {
        FdicBankFindMcpServer::default()
    }
}

#[tool(tool_box)]
impl FdicBankFindMcpServer {
    /// Returns MCP server status for Inspector/health validation
    #[tool(description = "Returns MCP server status for Inspector/health validation")]
    pub async fn ping(&self) -> String {
        "The FDIC Bank Find MCP server is alive!".to_string()
    }

    {%- for ep in endpoints %}
    /// FDIC BankFind API `/{{ ep.endpoint }}` endpoint handler
    #[tool(description = r#"{{ ep.summary }} - {{ ep.description }} - {{ ep.tags.0 }}"#)]
    pub async fn {{ ep.fn_name }}(&self, #[tool(aggr)] params: {{ ep.endpoint }}::{{ ep.endpoint_cap }}Parameters) -> Result<CallToolResult, rmcp::Error> {
        let config = FdicApiConfig { base_url: FDIC_BASE_URL.to_string() };
        let fdic_response = {{ ep.endpoint }}::{{ ep.endpoint }}_handler(&config, &params).await;
        fdic_response
    }
    {%- endfor %}
    {%- if skipped_endpoints and skipped_endpoints | length > 0 %}
    // Skipped handler wrappers due to ENDPOINT_EXCLUSIONS:
    {%- for ep in skipped_endpoints %}
    // [EXCLUDED] pub async fn {{ ep }}_handler(...);
    {%- endfor %}
    {%- endif %}
}

#[tool(tool_box)]
impl ServerHandler for FdicBankFindMcpServer {
    fn get_info(&self) -> ServerInfo {
        eprintln!("[FDIC MCP] get_info() called - should show tools!");

        // Set up explicit capabilities for tools and resources
        let mut tools_capability = ToolsCapability::default();
        tools_capability.list_changed = Some(true);

        let mut resources_capability = ResourcesCapability::default();
        resources_capability.list_changed = Some(true);

        let info = ServerInfo {
            protocol_version: ProtocolVersion::V_2024_11_05,
            capabilities: ServerCapabilities {
                experimental: None,
                logging: None,
                completions: None,
                prompts: None,
                resources: Some(resources_capability),
                tools: Some(tools_capability),
            },
            server_info: Implementation::from_build_env(),
            instructions: Some("FDIC Bank Find MCP Server (Unofficial) - https://banks.data.fdic.gov/docs/".into()),
        };

        eprintln!("[FDIC MCP] Returning ServerInfo with enabled tools and resources: {:?}", info);
        info
    }

    /// Implements MCP resource enumeration for all schema resources (one per endpoint)
    fn list_resources(
        &self, _request: Option<PaginatedRequestParam>, _context: RequestContext<RoleServer>,
    ) -> impl Future<Output = Result<ListResourcesResult, Error>> + Send + '_ {
        use rmcp::model::{Annotated, RawResource};
        let resources = vec![
            {%- for ep in endpoints %}
            Annotated {
                raw: RawResource {
                    uri: format!("/schema/{}", "{{ ep.endpoint }}"),
                    name: "{{ ep.endpoint }}".to_string(),
                    description: Some("JSON schema for the /{{ ep.endpoint }} endpoint (fields, types, docs, envelope)".to_string()),
                    mime_type: Some("application/json".to_string()),
                    size: None,
                },
                annotations: Default::default(),
            },
            {%- endfor %}
        ];
        std::future::ready(Ok(ListResourcesResult { resources, next_cursor: None }))
    }

    /// Implements MCP resource fetching for schema resources by URI
    fn read_resource(
        &self,
        request: ReadResourceRequestParam,
        _context: RequestContext<RoleServer>,
    ) -> impl Future<Output = Result<ReadResourceResult, Error>> + Send + '_ {
        use rmcp::model::{ResourceContents, ErrorData, ReadResourceResult};
        let uri = request.uri;
        let prefix = "/schema/";
        let result = if let Some(endpoint) = uri.strip_prefix(prefix) {
            let schema_json = match endpoint.to_lowercase().as_str() {
                "demographics" => include_str!("../../public/schemas/demographics.json"),
                "failures" => include_str!("../../public/schemas/failures.json"),
                "history" => include_str!("../../public/schemas/history.json"),
                "institutions" => include_str!("../../public/schemas/institutions.json"),
                "locations" => include_str!("../../public/schemas/locations.json"),
                "sod" => include_str!("../../public/schemas/sod.json"),
                "summary" => include_str!("../../public/schemas/summary.json"),
                _ => return std::future::ready(Err(Error::from(ErrorData::resource_not_found(
                    format!("Schema not found for endpoint '{}': unknown endpoint", endpoint),
                    None,
                )))),
            };
            let resource = ResourceContents::text(schema_json, format!("/schema/{}", endpoint.to_lowercase()));
            Ok(ReadResourceResult {
                contents: vec![resource],
            })
        } else {
            Err(Error::from(ErrorData::resource_not_found(
                format!("Unknown resource URI: {}", uri),
                None,
            )))
        };
        std::future::ready(result)
    }
}
